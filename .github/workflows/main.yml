name: CI/CD and Cache Update

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC (off-peak hours)
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual trigger

env:
  DOTNET_VERSION: '8.0.x'
  AZURE_WEBAPP_NAME: ecfr-api    # Replace with your app name
  AZURE_WEBAPP_PACKAGE_PATH: 'publish'

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore --configuration Release

    - name: Test
      run: dotnet test --no-build --configuration Release --verbosity normal

    - name: Install EF Tool
      run: dotnet tool install --global dotnet-ef

    - name: Create Database Directory
      run: mkdir -p ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/App_Data

    - name: Generate Database
      run: |
        cd EcfrApi.Web
        dotnet ef database update
      env:
        ConnectionStrings__DefaultConnection: "Data Source=${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/App_Data/ecfr.db"

    - name: Publish
      if: github.event_name != 'pull_request'
      run: |
        dotnet publish EcfrApi.Web/EcfrApi.Web.csproj -c Release -o ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

    - name: Upload artifact
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v3
      with:
        name: webapp
        path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

  deploy:
    needs: build-and-test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: webapp
        path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

    - name: Deploy to Azure Web App
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

  update-cache:
    needs: deploy
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Wait for deployment to stabilize
      run: sleep 30

    - name: Check API health
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.API_BASE_URL }}/health)
        if [ $response -ne 200 ]; then
          echo "API health check failed with status code: $response"
          exit 1
        fi

    - name: Monitor cache update progress
      run: |
        # Initial delay to let the background service start
        sleep 60
        
        # Check the logs for cache update progress
        for i in {1..30}; do
          response=$(curl -s ${{ secrets.API_BASE_URL }}/api/admin/cache/status)
          if [[ $response == *"\"status\":\"completed\""* ]]; then
            echo "Cache update completed successfully"
            exit 0
          fi
          echo "Waiting for cache update to complete... (Attempt $i of 30)"
          sleep 60
        done
        
        echo "Cache update timed out after 30 minutes"
        exit 1
