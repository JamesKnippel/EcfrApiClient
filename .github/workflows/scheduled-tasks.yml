name: Scheduled Tasks

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  workflow_dispatch:
    inputs:
      task:
        description: 'Task to run'
        type: choice
        options:
          - update-cache
          - health-check
        default: 'update-cache'
        required: true

env:
  DOTNET_VERSION: '8.0.x'
  APP_NAME: ecfr-app

jobs:
  update-cache:
    name: Update Title Cache
    if: github.event_name == 'schedule' || github.event.inputs.task == 'update-cache'
    runs-on: ubuntu-latest
    environment: production
    concurrency: 
      group: cache-update
      cancel-in-progress: false
    steps:
      - name: Verify API Health
        run: |
          echo "Checking API health..."
          MAX_RETRIES=3
          RETRY_DELAY=30
          
          for i in $(seq 1 $MAX_RETRIES); do
            response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.API_BASE_URL }}/health)
            if [ $response -eq 200 ]; then
              echo "‚úÖ API health verified"
              break
            fi
            
            if [ $i -eq $MAX_RETRIES ]; then
              echo "‚ùå API health check failed after $MAX_RETRIES attempts"
              exit 1
            fi
            
            echo "Attempt $i failed. Waiting ${RETRY_DELAY}s before retry..."
            sleep $RETRY_DELAY
          done

      - name: Update Cache
        run: |
          echo "Triggering cache update..."
          response=$(curl -X POST ${{ secrets.CACHE_UPDATE_URL }} \
            -H "Authorization: Bearer ${{ secrets.API_KEY }}" \
            -s -w "\n%{http_code}")
          
          status_code=$(echo "$response" | tail -n1)
          response_body=$(echo "$response" | head -n-1)
          
          if [ $status_code -ne 202 ]; then
            echo "‚ùå Cache update failed with status: $status_code"
            echo "Response: $response_body"
            exit 1
          fi
          echo "‚úÖ Cache update triggered successfully"

      - name: Monitor Progress
        run: |
          echo "Monitoring cache update progress..."
          MAX_DURATION=1800  # 30 minutes timeout
          CHECK_INTERVAL=60  # Check every minute
          
          start_time=$(date +%s)
          
          while true; do
            current_time=$(date +%s)
            elapsed=$((current_time - start_time))
            
            if [ $elapsed -ge $MAX_DURATION ]; then
              echo "‚ùå Cache update timed out after 30 minutes"
              exit 1
            fi
            
            response=$(curl -s ${{ secrets.API_BASE_URL }}/api/admin/cache/status \
              -H "Authorization: Bearer ${{ secrets.API_KEY }}")
            
            if [[ $response == *"\"status\":\"completed\""* ]]; then
              echo "‚úÖ Cache update completed successfully"
              exit 0
            elif [[ $response == *"\"status\":\"failed\""* ]]; then
              echo "‚ùå Cache update failed"
              echo "Response: $response"
              exit 1
            fi
            
            echo "Cache update in progress... (${elapsed}s elapsed)"
            sleep $CHECK_INTERVAL
          done

  health-check:
    name: System Health Check
    if: github.event_name == 'schedule' || github.event.inputs.task == 'health-check'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Check API Health
        run: |
          response=$(curl -s ${{ secrets.API_BASE_URL }}/health)
          if [[ $response != *"\"status\":\"healthy\""* ]]; then
            echo "‚ùå API health check failed"
            exit 1
          fi
          echo "‚úÖ API health check passed"

      - name: Check Frontend Health
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ secrets.FRONTEND_URL }})
          if [ $response -ne 200 ]; then
            echo "‚ùå Frontend health check failed"
            exit 1
          fi
          echo "‚úÖ Frontend health check passed"

      - name: Send Notification
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® System Health Check Failed',
              body: `Health check failed at ${new Date().toISOString()}\n\nCheck the [workflow run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for details.`
            });
