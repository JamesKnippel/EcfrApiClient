name: Frontend CI/CD Pipeline

on:
  push:
    branches: 
      - develop
    paths:
      - 'ecfr-client/**'
      - '.github/workflows/frontend-pipeline.yml'
  pull_request:
    branches: [ master, develop ]
    paths:
      - 'ecfr-client/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        type: choice
        options:
          - staging
          - production
        default: 'staging'
        required: true

env:
  NODE_VERSION: '20.x'
  APP_LOCATION: './ecfr-client'
  OUTPUT_LOCATION: './ecfr-client/dist/ecfr-client/browser'
  AZURE_STATIC_WEB_APPS_API_TOKEN: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}

jobs:
  validate:
    name: Lint and Test
    runs-on: ubuntu-latest
    outputs:
      client_changed: ${{ steps.filter.outputs.client_changed }}
    steps:
      - uses: actions/checkout@v4

      - name: Check for Frontend changes
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            client_changed:
              - 'ecfr-client/**'

      - name: Setup Node.js
        if: steps.filter.outputs.client_changed == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.APP_LOCATION }}/package-lock.json'

      - name: Install Dependencies
        if: steps.filter.outputs.client_changed == 'true'
        working-directory: ${{ env.APP_LOCATION }}
        run: npm ci

  build:
    name: Build Application
    needs: validate
    if: needs.validate.outputs.client_changed == 'true' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.APP_LOCATION }}/package-lock.json'

      - name: Install Dependencies
        working-directory: ${{ env.APP_LOCATION }}
        run: npm ci

      - name: Build
        working-directory: ${{ env.APP_LOCATION }}
        run: npm run build -- --configuration ${{ github.event.inputs.environment || (github.ref == 'refs/heads/master' && 'production' || 'staging') }}

      - name: Upload Build
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: ${{ env.OUTPUT_LOCATION }}
          retention-days: 1

  deploy-staging:
    name: Deploy to Staging
    needs: build
    if: |
      needs.build.result == 'success' && 
      (github.ref == 'refs/heads/develop' || 
      github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Download Build
        uses: actions/download-artifact@v3
        with:
          name: app-build
          path: ${{ env.OUTPUT_LOCATION }}

      - name: Deploy to Staging
        id: deploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ env.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: ${{ env.OUTPUT_LOCATION }}
          skip_app_build: true
          deployment_environment: staging

      - name: Verify Deployment
        run: |
          echo "Waiting for deployment to stabilize..."
          sleep 30
          
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ steps.deploy.outputs.url }})
          if [ $response -ne 200 ]; then
            echo "❌ Staging deployment verification failed: $response"
            exit 1
          fi
          echo "✅ Staging deployment verified"

  deploy-production:
    name: Production Release
    needs: deploy-staging
    if: |
      needs.deploy-staging.result == 'success' &&
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.environment == 'production'
    runs-on: ubuntu-latest
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Download Build
        uses: actions/download-artifact@v3
        with:
          name: app-build
          path: ${{ env.OUTPUT_LOCATION }}

      - name: Deploy to Production
        id: deploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ env.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: ${{ env.OUTPUT_LOCATION }}
          skip_app_build: true
          deployment_environment: production

      - name: Verify Deployment
        run: |
          echo "Waiting for deployment to stabilize..."
          sleep 30
          
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ steps.deploy.outputs.url }})
          if [ $response -ne 200 ]; then
            echo "❌ Production deployment verification failed: $response"
            exit 1
          fi
          echo "✅ Production deployment verified"
