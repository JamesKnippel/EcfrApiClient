name: Backend CI/CD Pipeline

on:
  push:
    branches: 
      - master
      - develop
    paths:
      - 'EcfrApi.Web/**'
      - 'EcfrApi.Tests/**'
      - 'Dockerfile'
      - '.github/workflows/backend-pipeline.yml'
  pull_request:
    branches: [ master, develop ]
    paths:
      - 'EcfrApi.Web/**'
      - 'EcfrApi.Tests/**'
      - 'Dockerfile'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        type: choice
        options:
          - staging
          - production
        default: 'staging'
        required: true

env:
  DOTNET_VERSION: '8.0.x'
  APP_NAME: ecfr-app
  REGISTRY_NAME: ecfrregistry
  IMAGE_NAME: ecfr-api

jobs:
  validate:
    name: Build and Test
    runs-on: ubuntu-latest
    outputs:
      api_changed: ${{ steps.filter.outputs.api_changed }}
    steps:
      - uses: actions/checkout@v4

      - name: Check for API changes
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            api_changed:
              - 'EcfrApi.Web/**'
              - 'Dockerfile'

      - name: Setup .NET
        if: steps.filter.outputs.api_changed == 'true'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore
        if: steps.filter.outputs.api_changed == 'true'
        run: dotnet restore

      - name: Build
        if: steps.filter.outputs.api_changed == 'true'
        run: dotnet build --configuration Release --no-restore

      - name: Test
        if: steps.filter.outputs.api_changed == 'true'
        run: dotnet test --configuration Release --no-build --verbosity normal

  build-image:
    name: Build and Push Container
    needs: validate
    if: needs.validate.outputs.api_changed == 'true' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: ACR Login
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.REGISTRY_NAME }}.azurecr.io
          username: ${{ secrets.REGISTRY_USERNAME }}
          password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Build and Push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy-staging:
    name: Deploy to Staging
    needs: build-image
    if: |
      needs.build-image.result == 'success' && 
      (github.ref == 'refs/heads/develop' || 
      github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://ecfr-api-staging.whitemeadow-0306cf91.eastus.azurecontainerapps.io
    
    steps:
      - uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Staging
        id: deploy
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az config set extension.use_dynamic_install=yes_without_prompt
            az containerapp registry set \
              --name ecfr-api-staging \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --server ${{ env.REGISTRY_NAME }}.azurecr.io \
              --username ${{ secrets.REGISTRY_USERNAME }} \
              --password ${{ secrets.REGISTRY_PASSWORD }}

            az containerapp update \
              --name ecfr-api-staging \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --image ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }} \
              --yaml container-config.staging.yaml

      - name: Verify Deployment
        run: |
          echo "Waiting for deployment to stabilize..."
          sleep 30
          
          response=$(curl -s -o /dev/null -w "%{http_code}" ${{ steps.deploy.outputs.url }}/api/health)
          if [ $response -ne 200 ]; then
            echo "❌ Staging deployment verification failed: $response"
            exit 1
          fi
          echo "✅ Staging deployment verified"

  deploy-production:
    name: Production Release
    needs: deploy-staging
    if: |
      (github.ref == 'refs/heads/master' && github.event_name == 'push') || 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Switch Traffic
        id: deploy
        uses: azure/container-apps-deploy-action@v1
        with:
          containerAppName: ${{ env.APP_NAME }}
          resourceGroup: ${{ secrets.AZURE_RESOURCE_GROUP }}
          revisionMode: multiple
          trafficWeight: 100

      - name: Cleanup Old Revisions
        run: |
          echo "Cleaning up old revisions..."
          az containerapp revision list \
            --name ${{ env.APP_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --query "[?trafficWeight==\`0\`].name" -o tsv | \
          head -n -1 | \
          xargs -I {} az containerapp revision deactivate \
            --name ${{ env.APP_NAME }} \
            --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
            --revision {}
