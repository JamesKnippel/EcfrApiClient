name: Frontend CI/CD Pipeline

on:
  push:
    branches: 
      - develop
    paths:
      - 'ecfr-client/**'
      - '.github/workflows/frontend-pipeline.yml'
  pull_request:
    branches: [ master, develop ]
    paths:
      - 'ecfr-client/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        type: choice
        options:
          - staging
          - production
        default: 'staging'
        required: true

jobs:
  validate:
    name: Lint and Test
    runs-on: ubuntu-latest
    outputs:
      client_changed: ${{ steps.filter.outputs.client_changed }}
    steps:
      - uses: actions/checkout@v4

      - name: Check for Frontend changes
        id: filter
        uses: dorny/paths-filter@v2
        with:
          filters: |
            client_changed:
              - 'ecfr-client/**'

      - name: Setup Node.js
        if: steps.filter.outputs.client_changed == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: './ecfr-client/package-lock.json'

      - name: Install Dependencies
        if: steps.filter.outputs.client_changed == 'true'
        working-directory: ./ecfr-client
        run: npm ci

  build:
    name: Build Application
    needs: validate
    if: needs.validate.outputs.client_changed == 'true' && github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          cache-dependency-path: './ecfr-client/package-lock.json'

      - name: Install Dependencies
        working-directory: ./ecfr-client
        run: npm ci

      - name: Build
        working-directory: ./ecfr-client
        run: npm run build -- --configuration production

      - name: Copy config file
        run: |
          cp ./ecfr-client/staticwebapp.config.json ./ecfr-client/dist/ecfr-client/browser/

      - name: Upload Build
        uses: actions/upload-artifact@v4
        with:
          name: app-build
          path: ./ecfr-client/dist/ecfr-client/browser
          retention-days: 1

  deploy-staging:
    name: Deploy to Staging
    needs: build
    if: |
      needs.build.result == 'success' && 
      (github.ref == 'refs/heads/develop' || 
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging'))
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Download Build
        uses: actions/download-artifact@v4
        with:
          name: app-build
          path: ./ecfr-client/dist/ecfr-client/browser

      - name: Install OIDC Client
        run: npm install @actions/core@1.6.0 @actions/http-client

      - name: Get Id Token
        uses: actions/github-script@v6
        id: idtoken
        with:
          script: |
            const actionsCore = require('@actions/core')
            return await actionsCore.getIDToken()
          result-encoding: string

      - name: Deploy to Staging
        id: deploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_ZEALOUS_GROUND_0D8232B0F }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "./ecfr-client/dist/ecfr-client/browser"
          api_location: ""
          output_location: ""
          skip_app_build: true
          deployment_environment: staging
          github_id_token: ${{ steps.idtoken.outputs.result }}

      - name: Verify Deployment
        run: |
          echo "Waiting for deployment to stabilize..."
          sleep 30
          
          max_attempts=5
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt of $max_attempts..."
            
            full_response=$(curl -s -i ${{ steps.deploy.outputs.url }})
            status_code=$(echo "$full_response" | grep HTTP | awk '{print $2}')
            
            if [ "$status_code" = "200" ]; then
              echo " Deployment verified successfully"
              exit 0
            else
              echo "Attempt $attempt failed with status: $status_code"
              echo "Response:"
              echo "$full_response"
              
              if [ $attempt -lt $max_attempts ]; then
                echo "Waiting 30 seconds before next attempt..."
                sleep 30
              fi
            fi
            
            attempt=$((attempt + 1))
          done
          
          echo " Deployment verification failed after $max_attempts attempts"
          exit 1

  deploy-production:
    name: Production Release
    needs: build
    if: |
      needs.build.result == 'success' &&
      github.event_name == 'workflow_dispatch' &&
      github.event.inputs.environment == 'production'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Download Build
        uses: actions/download-artifact@v4
        with:
          name: app-build
          path: ./ecfr-client/dist/ecfr-client/browser

      - name: Install OIDC Client
        run: npm install @actions/core@1.6.0 @actions/http-client

      - name: Get Id Token
        uses: actions/github-script@v6
        id: idtoken
        with:
          script: |
            const actionsCore = require('@actions/core')
            return await actionsCore.getIDToken()
          result-encoding: string

      - name: Deploy to Production
        id: deploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_ZEALOUS_GROUND_0D8232B0F }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "./ecfr-client/dist/ecfr-client/browser"
          api_location: ""
          output_location: ""
          skip_app_build: true
          deployment_environment: production
          github_id_token: ${{ steps.idtoken.outputs.result }}

      - name: Verify Deployment
        run: |
          echo "Waiting for deployment to stabilize..."
          sleep 30
          
          max_attempts=5
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            echo "Attempt $attempt of $max_attempts..."
            
            full_response=$(curl -s -i ${{ steps.deploy.outputs.url }})
            status_code=$(echo "$full_response" | grep HTTP | awk '{print $2}')
            
            if [ "$status_code" = "200" ]; then
              echo " Deployment verified successfully"
              exit 0
            else
              echo "Attempt $attempt failed with status: $status_code"
              echo "Response:"
              echo "$full_response"
              
              if [ $attempt -lt $max_attempts ]; then
                echo "Waiting 30 seconds before next attempt..."
                sleep 30
              fi
            fi
            
            attempt=$((attempt + 1))
          done
          
          echo " Deployment verification failed after $max_attempts attempts"
          exit 1
