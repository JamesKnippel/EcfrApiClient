name: Deploy to Azure

on:
  push:
    branches: [ "master" ]
    paths:
      - 'ecfr-client/**'
      - 'EcfrApi.Web/**'
      - '.github/workflows/**'
      - 'Dockerfile'
  workflow_dispatch:
    inputs:
      deploy_client:
        description: 'Deploy client app'
        type: boolean
        default: true
      deploy_api:
        description: 'Deploy API'
        type: boolean
        default: true

env:
  AZURE_WEBAPP_NAME: ecfr-app
  REGISTRY_NAME: ecfrregistry
  API_IMAGE_NAME: ecfr-api
  CLIENT_IMAGE_NAME: ecfr-client

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      client_changed: ${{ steps.filter.outputs.client_changed }}
      api_changed: ${{ steps.filter.outputs.api_changed }}
    steps:
    - uses: actions/checkout@v3

    - name: Check for changes
      id: filter
      uses: dorny/paths-filter@v2
      with:
        filters: |
          client_changed:
            - 'ecfr-client/**'
          api_changed:
            - 'EcfrApi.Web/**'
            - 'Dockerfile'

  test-api:
    needs: check-changes
    if: ${{ needs.check-changes.outputs.api_changed == 'true' }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Test
      run: dotnet test --verbosity detailed

  build-and-push-images:
    needs: [check-changes, test-api]
    runs-on: ubuntu-latest
    if: ${{ needs.check-changes.outputs.client_changed == 'true' || needs.check-changes.outputs.api_changed == 'true' }}
    outputs:
      api_image: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.API_IMAGE_NAME }}:${{ github.sha }}
      client_image: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.CLIENT_IMAGE_NAME }}:${{ github.sha }}
    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        version: latest
        driver: docker-container
        driver-opts: |
          network=host

    - name: Log in to Azure Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Build and push API image
      if: ${{ needs.check-changes.outputs.api_changed == 'true' }}
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.API_IMAGE_NAME }}:${{ github.sha }}

    - name: Build and push Client image
      if: ${{ needs.check-changes.outputs.client_changed == 'true' }}
      uses: docker/build-push-action@v4
      with:
        context: ./ecfr-client
        push: true
        tags: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.CLIENT_IMAGE_NAME }}:${{ github.sha }}
        builder: ${{ steps.buildx.outputs.name }}

  deploy:
    needs: build-and-push-images
    runs-on: ubuntu-latest
    steps:    
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy API to Azure Container App
      if: ${{ needs.check-changes.outputs.api_changed == 'true' }}
      uses: azure/container-apps-deploy-action@v1
      with:
        acrName: ${{ env.REGISTRY_NAME }}
        containerAppName: ${{ env.AZURE_WEBAPP_NAME }}-api
        resourceGroup: ${{ secrets.AZURE_RESOURCE_GROUP }}
        containerAppEnvironment: ecfr-env
        targetPort: 80
        ingress: external
        location: eastus
        imageToDeploy: ${{ needs.build-and-push-images.outputs.api_image }}
        environmentVariables: |
          ASPNETCORE_ENVIRONMENT=Production

    - name: Deploy Client to Azure Container App
      if: ${{ needs.check-changes.outputs.client_changed == 'true' }}
      uses: azure/container-apps-deploy-action@v1
      with:
        acrName: ${{ env.REGISTRY_NAME }}
        containerAppName: ${{ env.AZURE_WEBAPP_NAME }}-client
        resourceGroup: ${{ secrets.AZURE_RESOURCE_GROUP }}
        containerAppEnvironment: ecfr-env
        targetPort: 80
        ingress: external
        location: eastus
        imageToDeploy: ${{ needs.build-and-push-images.outputs.client_image }}
        environmentVariables: |
          API_HOST=${{ env.AZURE_WEBAPP_NAME }}-api.azurecontainerapps.io
