name: Deploy to Azure

on:
  push:
    branches: [ "master" ]
    paths:
      - 'ecfr-client/**'
      - 'EcfrApi.Web/**'
      - '.github/workflows/**'
      - 'Dockerfile'
  workflow_dispatch:
    inputs:
      deploy_client:
        description: 'Deploy client app'
        type: boolean
        default: true
      deploy_api:
        description: 'Deploy API'
        type: boolean
        default: true

env:
  AZURE_WEBAPP_NAME: ecfr-app
  REGISTRY_NAME: ecfrregistry
  API_IMAGE_NAME: ecfr-api
  CLIENT_IMAGE_NAME: ecfr-client

jobs:
  build-client:
    if: ${{ github.event_name == 'push' || github.event.inputs.deploy_client == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      client_changed: ${{ steps.filter.outputs.client_changed }}
    steps:
    - uses: actions/checkout@v3

    - name: Check for client changes
      id: filter
      uses: dorny/paths-filter@v2
      with:
        filters: |
          client_changed:
            - 'ecfr-client/**'

    - name: Setup Node.js
      if: steps.filter.outputs.client_changed == 'true'
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: './ecfr-client/package-lock.json'

    - name: Cache node modules
      if: steps.filter.outputs.client_changed == 'true'
      uses: actions/cache@v3
      with:
        path: ecfr-client/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('ecfr-client/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Angular dependencies
      if: steps.filter.outputs.client_changed == 'true'
      run: |
        cd ecfr-client
        npm ci

    - name: Build Angular app
      if: steps.filter.outputs.client_changed == 'true'
      run: |
        cd ecfr-client
        npm run build

  build-api:
    if: ${{ github.event_name == 'push' || github.event.inputs.deploy_api == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      api_changed: ${{ steps.filter.outputs.api_changed }}
    steps:
    - uses: actions/checkout@v4

    - name: Check for API changes
      id: filter
      uses: dorny/paths-filter@v2
      with:
        filters: |
          api_changed:
            - 'EcfrApi.Web/**'
            - 'Dockerfile'

    - name: Setup .NET
      if: steps.filter.outputs.api_changed == 'true'
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Restore dependencies
      if: steps.filter.outputs.api_changed == 'true'
      run: dotnet restore

    - name: Build
      if: steps.filter.outputs.api_changed == 'true'
      run: dotnet build --no-restore

    - name: Test
      if: steps.filter.outputs.api_changed == 'true'
      run: dotnet test --no-build --verbosity detailed

  build-and-push-images:
    needs: [build-client, build-api]
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || github.event.inputs.deploy_api == 'true' || github.event.inputs.deploy_client == 'true' }}
    outputs:
      api_image: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.API_IMAGE_NAME }}:${{ github.sha }}
      client_image: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.CLIENT_IMAGE_NAME }}:${{ github.sha }}
    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        version: latest
        driver: docker-container
        driver-opts: |
          network=host

    - name: Log in to Azure Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Build and push API image
      if: ${{ github.event_name == 'push' || github.event.inputs.deploy_api == 'true' }}
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.API_IMAGE_NAME }}:${{ github.sha }}

    - name: Build and push Client image
      if: ${{ github.event_name == 'push' || github.event.inputs.deploy_client == 'true' }}
      uses: docker/build-push-action@v4
      with:
        context: ./ecfr-client
        push: true
        tags: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.CLIENT_IMAGE_NAME }}:${{ github.sha }}
        builder: ${{ steps.buildx.outputs.name }}

  deploy:
    needs: build-and-push-images
    runs-on: ubuntu-latest
    steps:    
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Deploy API to Azure Container App
      if: ${{ github.event_name == 'push' || github.event.inputs.deploy_api == 'true' }}
      uses: azure/container-apps-deploy-action@v1
      with:
        acrName: ${{ env.REGISTRY_NAME }}
        acrUsername: ${{ secrets.REGISTRY_USERNAME }}
        acrPassword: ${{ secrets.REGISTRY_PASSWORD }}
        containerAppName: ${{ env.AZURE_WEBAPP_NAME }}-api
        resourceGroup: ${{ secrets.AZURE_RESOURCE_GROUP }}
        containerAppEnvironment: ecfr-env
        targetPort: 80
        ingress: external
        location: eastus
        imageToDeploy: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.API_IMAGE_NAME }}:${{ github.sha }}
        environmentVariables: |
          ASPNETCORE_ENVIRONMENT=Production

    - name: Deploy Client to Azure Container App
      if: ${{ github.event_name == 'push' || github.event.inputs.deploy_client == 'true' }}
      uses: azure/container-apps-deploy-action@v1
      with:
        acrName: ${{ env.REGISTRY_NAME }}
        acrUsername: ${{ secrets.REGISTRY_USERNAME }}
        acrPassword: ${{ secrets.REGISTRY_PASSWORD }}
        containerAppName: ${{ env.AZURE_WEBAPP_NAME }}-client
        resourceGroup: ${{ secrets.AZURE_RESOURCE_GROUP }}
        containerAppEnvironment: ecfr-env
        targetPort: 80
        ingress: external
        location: eastus
        imageToDeploy: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.CLIENT_IMAGE_NAME }}:${{ github.sha }}
        environmentVariables: |
          API_HOST=${{ env.AZURE_WEBAPP_NAME }}-api.azurecontainerapps.io
